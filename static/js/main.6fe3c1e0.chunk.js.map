{"version":3,"sources":["logo.svg","tweets/components.js","lookup/components.js","App.js","reportWebVitals.js","index.js"],"names":["TweetsComponet","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","console","log","className","onSubmit","event","preventDefault","newVal","current","value","tempNewTweets","unshift","content","likes","id","ref","required","name","type","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","send","loadTweets","alert","map","item","index","Tweet","tweet","ActionBtn","action","setLikes","userLike","setUserLike","actionDisplay","display","onClick","App","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","document","getElementById","ReactDOM","render","StrictMode","tweetsEl"],"mappings":"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","file":"static/js/main.6fe3c1e0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {useEffect, useState} from 'react'\r\n\r\nimport {loadTweets} from '../lookup'\r\n\r\nexport function TweetsComponet(props) {\r\n    const textAreaRef = React.createRef()\r\n    const [newTweets, setNewTweets] = useState([])\r\n    console.log(props)\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        const newVal = textAreaRef.current.value\r\n        let tempNewTweets = [...newTweets]\r\n        // change to server side call\r\n        tempNewTweets.unshift({\r\n            content: newVal,\r\n            likes: 0,\r\n            id: 123123\r\n        })\r\n        setNewTweets(tempNewTweets)\r\n        textAreaRef.current.value = ''\r\n    }\r\n    return <div className={props.className}>\r\n            <div className='col-12 mb-3'>\r\n                <form onSubmit={handleSubmit}>\r\n                    <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'>\r\n\r\n                    </textarea>\r\n                    <button type='submit' className='btn btn-primary my-3'>Tweet</button>\r\n                </form>\r\n            </div>\r\n        <TweetsList newTweets={newTweets}/>\r\n    </div>\r\n\r\n}\r\n\r\nexport function TweetsList(props) {\r\n    // const [tweetsInit, setTweetsInit] = useState(props.newTweets ? props.newTweets : [])\r\n    const [tweetsInit, setTweetsInit] = useState([])\r\n    // setTweetsInit(props.newTweets)\r\n    const [tweets, setTweets] = useState([])\r\n    useEffect(() =>{\r\n        const final = [...props.newTweets].concat(tweetsInit)\r\n        // const final = [...props.newTweets]\r\n        if (final.length !== tweets.length) {\r\n            setTweets(final)\r\n        }\r\n    }, [props.newTweets, tweets, tweetsInit])\r\n\r\n    useEffect(() =>{\r\n        // do my lookup\r\n        const myCallback = (response, status) => {\r\n            if(status === 200){\r\n                // const finalTweetsInit = [...response].concat(tweetsInit)\r\n                setTweetsInit(response)\r\n            } else {\r\n                alert(\"There was an error\")\r\n            }\r\n        }\r\n        loadTweets(myCallback)\r\n    }, [tweetsInit])\r\n    return tweets.map((item, index)=>{\r\n        return <Tweet tweet={item} className='my-5 py-5 border bg-white text-dark' key={`${index}-{item.id}`}/>\r\n    })\r\n}  \r\n\r\nexport function ActionBtn(props) {\r\n    const {tweet, action} = props\r\n    let [likes, setLikes] = useState(tweet.likes ? tweet.likes : 0)\r\n    const [userLike, setUserLike] = useState(tweet.userLike === true ? true : false)\r\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\r\n    const actionDisplay = action.display ? action.display : 'Action'\r\n    const handleClick = (event) => {\r\n        event.preventDefault()\r\n        if (action.type === 'like') {\r\n            if (userLike === true) {\r\n                setLikes(likes - 1)\r\n                setUserLike(false)\r\n            } else {\r\n                setLikes(likes + 1)\r\n                setUserLike(true)\r\n            }\r\n        }\r\n    }\r\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\r\n    return <button className={className} onClick={handleClick}>{display}</button>\r\n}\r\n\r\nexport function Tweet(props) {\r\n    const {tweet} = props\r\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\r\n    return <div className={className}>\r\n        <p>{tweet.id} - {tweet.content}</p>\r\n        <div className='btn btn-group'> \r\n        <ActionBtn tweet={tweet} action={{type:\"like\", display:\"Likes\"}} />\r\n        <ActionBtn tweet={tweet} action={{type:\"unlike\", display:\"UnLike\"}} />\r\n        <ActionBtn tweet={tweet} action={{type:\"retweet\", display:\"Retweet\"}} />\r\n        </div>\r\n    </div>\r\n}","export function loadTweets(callback) {\r\n    const xhr = new XMLHttpRequest()\r\n    const method = \"Get\"\r\n    const url = \"http://localhost:8000/api/tweets/\"\r\n    const responseType = \"json\"\r\n    xhr.responseType = responseType\r\n    xhr.open(method, url)\r\n    xhr.onload = function() {\r\n        callback(xhr.response, xhr.status)\r\n    }\r\n    xhr.onerror = function (e) {\r\n        console.log(e)\r\n        callback({\"message\": \"The request was an error\"}, 400)\r\n    }\r\n    xhr.send()\r\n}","import logo from './logo.svg';\r\nimport './App.css';\r\nimport React from 'react';\r\n\r\nimport {TweetsComponet} from './tweets'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <div>\r\n          <TweetsComponet />\r\n        </div>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { TweetsComponet } from './tweets';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst appEl = document.getElementById('root')\r\nif (appEl) {\r\n  ReactDOM.render(\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n  );\r\n}\r\n\r\nconst tweetsEl = document.getElementById(\"apc-web\")\r\nif (tweetsEl){\r\n  ReactDOM.render(<TweetsComponet />, tweetsEl);\r\n}\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}